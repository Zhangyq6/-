#include<iostream>
#include<iomanip>
#include<cmath>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;

//常数
int K;

//输出时间的函数
void PrintTime(const int& hour, const int& minute) {
	string timep;
	timep = to_string(hour);
	while (timep.size() < 3) {
		timep = "0" + timep;
	}
	string minutep;
	minutep = to_string(minute);
	while (minutep.size() < 2) {
		minutep = "0" + minutep;
	}
	cout << timep << ":" << minutep << " ";
}

//武器的基类
class Weapon {
public:
	//该武器的编号
	int weapon_num;
	string weapon_name;//该武器的名字
	int used_num;
	int cur_force;
	Weapon(int num, string name) :weapon_num(num), weapon_name(name) {}
	Weapon() {}
};

//Sword类
class Sword :public Weapon {
public:
	Sword(int force) : Weapon(0, "sword") { cur_force = force * 2 / 10; }
};

//Arrow类
class Arrow :public Weapon {
public:
	static int R;//arrow's force
	Arrow() :Weapon(1, "arrow") { used_num = 3; }//初识化arrow为未使用过
};

//Bomb类
class Bomb :public Weapon {
public:
	Bomb() :Weapon(2, "bomb") {}
};

class Head;

//抽象的武士类
class Warrior {
	friend class Head;
	friend void Award(Warrior* w, Head* head, int element);
protected:
	int Warrior_num;//武士的编号
	string Name;//武士的名字
	static int ini_HP;//初始生命值
	int cur_HP;//当前生命值
	static int ini_force;//初始攻击力
	int cur_force;//当前攻击力
	string color;//武士所属司令部
	int sword_num = 0;
	int bomb_num = 0;
	int arrow_num = 0;
	int Loyalty;
	double Morale;
public:
	vector<Weapon*>weapon;//武士的武器
	Warrior(int num, string _color, string _name) :Warrior_num(num), color(_color), Name(_name) {
		//每个武士最多只能有三把武器
		weapon.push_back(NULL);
		weapon.push_back(NULL);
		weapon.push_back(NULL);
	};
	//武士降生函数
	virtual void Birth(const int& hour) {}

	//武士报告weapon情况
	void Report_Weapon(const int& hour) {
		PrintTime(hour, 55);
		//000:55 blue wolf 2 has arrow(2),bomb,sword(23)
		cout << color << " " << Name << " " << Warrior_num << " has ";
		//计算每一种武器的数量
		bool f = false;
		if (weapon[0] != NULL) {
			f = true;
			cout << "arrow(" << weapon[0]->used_num << ")";
		}
		if (weapon[1] != NULL) {
			if (f)
				cout << ",bomb";
			else
			{
				cout << "bomb";
				f = true;
			}
		}
		if (weapon[2] != NULL && weapon[2]->cur_force > 0) {
			if (f)
				cout << ",sword(" << weapon[2]->cur_force << ")";
			else
			{
				cout << "sword(" << weapon[2]->cur_force << ")";
				f = true;
			}
		}
		if (!f)
			cout << "no weapon";
		cout << endl;
	}

	//前进输出函数
	void PirntGO(int& city, const int& hour) {
		//000:10 blue lion 1 marched to city 1 with 10 elements and force 5
		PrintTime(hour, 10);
		cout << color << " " << Name << " " << Warrior_num << " marched to city " << city << " with " << cur_HP << " elements and force " << cur_force << endl;
	}

	//占领对方司令部的输出函数
	void Occupy(const int& hour) {
		//001:10 red iceman 1 reached blue headquarter with 20 elements and force 30
		PrintTime(hour, 10);
		cout << color << " " << Name << " " << Warrior_num << " reached " << (color == "red" ? "blue" : "red") << " headquarter with " << cur_HP << " elements and force " << cur_force << endl;
	}

	//virtual函数
	virtual void cheer(const int& hour, const int& cityNum) {}
	virtual void Goahead() {}
	virtual void AfterBattle(bool victory, Warrior* warrior) {}
	virtual void Snatch(Warrior* warrior, const int& hour, int citynum) {}
	virtual int GetLoyalty() { return Loyalty; }
	virtual double GetMorale() { return Morale; }

	//攻击与被攻击函数
	void Attack(Warrior* w, const int& hour, int& city_num) {
		//000:40 red iceman 1 attacked blue lion 1 in city 1 with 20 elements and force 30
		PrintTime(hour, 40);
		cout << color << " " << Name << " " << Warrior_num << " attacked ";
		cout << w->color << " " << w->Name << " " << w->Warrior_num;
		cout << " in city " << city_num << " with ";
		cout << cur_HP << " elements and force " << cur_force << endl;

		int hurt = cur_force;
		if (weapon[2] != NULL)
		{
			hurt += weapon[2]->cur_force;
			weapon[2]->cur_force = weapon[2]->cur_force * 8 / 10;
			if (weapon[2]->cur_force <= 0)
				weapon[2] = NULL;
		}
		w->Injury(hurt);
	}
	virtual void Injury(int hurt) {
		cur_HP -= hurt;
	}
	//反击函数
	void CounterAttack(Warrior* w, const int& hour, int& city_num) {
		//001:40 blue dragon 2 fought back against red lion 2 in city 1
		PrintTime(hour, 40);
		cout << color << " " << Name << " " << Warrior_num << " fought back against ";
		cout << w->color << " " << w->Name << " " << w->Warrior_num << " in city " << city_num << endl;

		int hurt = cur_force / 2;
		if (weapon[2] != NULL)
		{
			hurt += weapon[2]->cur_force;
			weapon[2]->cur_force = weapon[2]->cur_force * 8 / 10;
			if (weapon[2]->cur_force <= 0)
				weapon[2] = NULL;
		}
		w->Injury(hurt);

	}
	//武士战死的输出函数
	void PrintDie(const int& hour, int& city_num) {
		//001:40 red lion 2 was killed in city 1
		PrintTime(hour, 40);
		cout << color << " " << Name << " " << Warrior_num << " was killed in city " << city_num << endl;
	}
	//返回武士能造成伤害的函数
	int Hurt(bool Counter) {
		int hurt = 0;
		if (Counter)
			hurt = cur_force / 2;
		else
			hurt = cur_force;
		if (weapon[2] != NULL)
			hurt += weapon[2]->cur_force;
		return hurt;
	}

	//判断一个武士是否为wolf
	bool Is_wolf() { return Name == "wolf"; }
	string GetName() { return Name; }
	int GetNum() { return Warrior_num; }
	bool Is_Death() { return cur_HP <= 0; }//判断该武士是否战死
	int& GetcurHP() { return cur_HP; }
	string GetColor() { return color; }
};


//Dragon类
class Dragon :public Warrior {
public:
	static int ini_HP;//初始生命值
	static int ini_force;//初始攻击力
	Dragon(int num, string _color, int ResidueLife) :Warrior(num, _color, "dragon") {
		cur_HP = ini_HP;
		cur_force = ini_force;
		//初始化morale
		Morale = (ResidueLife + 0.0) / ini_HP;
		//获取weapon
		if (Warrior_num % 3 == 0)
			weapon[2] = new Sword(ini_force);
		else if (Warrior_num % 3 == 1)
			weapon[1] = new Bomb;
		else
			weapon[0] = new Arrow;
	}

	//武士降生函数
	void Birth(const int& hour) {
		PrintTime(hour, 0);
		//000:00 blue dragon 1 born
		//Its morale is 23.34
		cout << color << " dragon " << Warrior_num << " born" << endl;
		cout << "Its morale is " << fixed << setprecision(2) << Morale << endl;
	}

	//欢呼函数
	void cheer(const int& hour, const int& cityNum) {
		if (Morale > 0.8)
		{
			PrintTime(hour, 40);
			//003:40 blue dragon 2 yelled in city 4
			cout << color << " dragon " << Warrior_num << " yelled in city " << cityNum << endl;
		}
	}

	//战后更改士气的函数
	virtual void AfterBattel(bool victory, Warrior* warrior) {
		if (victory)
			Morale += 0.2;
		else
			Morale -= 0.2;
	}

	//返回士气值
	virtual double GetMorale() { return Morale; }
};

//Ninja类
class Ninja :public Warrior {
public:
	static int ini_HP;//初始生命值
	static int ini_force;//初始攻击力
	Ninja(int num, string _color) :Warrior(num, _color, "ninja") {
		cur_HP = ini_HP;
		cur_force = ini_force;
		//获取weapon
		if (Warrior_num % 3 == 0)
		{
			weapon[2] = (new Sword(ini_force));
			weapon[1] = (new Bomb);
		}
		else if (Warrior_num % 3 == 1)
		{
			weapon[1] = (new Bomb);
			weapon[0] = (new Arrow);
		}
		else
		{
			weapon[0] = (new Arrow);
			weapon[2] = (new Sword(ini_force));
		}
	}
	//武士降生函数
	void Birth(const int& hour) {
		PrintTime(hour, 0);
		cout << color << " ninja " << Warrior_num << " born" << endl;
	}
};

//Iceman类
class Iceman :public Warrior {
public:
	static int ini_HP;//初始生命值
	static int ini_force;//初始攻击力
	int step = 0;
	Iceman(int num, string _color) :Warrior(num, _color, "iceman") {
		cur_HP = ini_HP;
		cur_force = ini_force;
		//获取weapon
		if (Warrior_num % 3 == 0)
			weapon[2] = (new Sword(ini_force));
		else if (Warrior_num % 3 == 1)
			weapon[1] = (new Bomb);
		else
			weapon[0] = (new Arrow);
	}
	//武士降生函数
	void Birth(const int& hour) {
		PrintTime(hour, 0);
		cout << color << " iceman " << Warrior_num << " born" << endl;
	}

	//iceman前进生命值减少攻击力增大的函数
	virtual void Goahead() {
		step++;
		if (step >= 2)
		{
			if (cur_HP > 9)
				cur_HP -= 9;
			else
				cur_HP = 1;
			cur_force += 20;
			step = 0;
		}
	}
};

//Lion类
class Lion :public Warrior {
public:
	static int ini_HP;//初始生命值
	static int ini_force;//初始攻击力
	Lion(int num, int ResidueLife, string _color) :Warrior(num, _color, "lion") {
		cur_HP = ini_HP;
		cur_force = ini_force;
		Loyalty = ResidueLife;
	}

	//武士降生函数
	void Birth(const int& hour) {
		PrintTime(hour, 0);
		cout << color << " lion " << Warrior_num << " born" << endl;
		//Its loyalty is 10
		cout << "Its loyalty is " << Loyalty << endl;
	}

	//lion的Loyalty减少的函数
	virtual void AfterBattle(bool victory, Warrior* warrior) {
		if (!victory)
			Loyalty -= K;
	}

	//返回Loyalty
	virtual int GetLolyalty() { return Loyalty; }
};

//Wolf类
class Wolf :public Warrior {
public:
	static int ini_HP;//初始生命值
	static int ini_force;//初始攻击力
	Wolf(int num, string _color) :Warrior(num, _color, "wolf") {
		cur_HP = ini_HP;
		cur_force = ini_force;
	}
	//武士降生函数
	void Birth(const int& hour) {
		PrintTime(hour, 0);
		cout << color << " wolf " << Warrior_num << " born" << endl;
	}
	//缴获武器
	virtual void AfterBattle(bool victory, Warrior* warrior) {
		if (!victory)
			return;
		if (weapon[0] == NULL && warrior->weapon[0] != NULL) {
			weapon[0] = warrior->weapon[0];
			warrior->weapon[0] = NULL;
		}
		if (weapon[1] == NULL && warrior->weapon[1] != NULL) {
			weapon[1] = warrior->weapon[1];
			warrior->weapon[1] = NULL;
		}
		if (weapon[2] == NULL && warrior->weapon[2] != NULL) {
			weapon[2] = warrior->weapon[2];
			warrior->weapon[2] = NULL;
		}
	}
};


//司令部类
class Head {
	string color;//司令部的颜色
public:
	static int ini_HP;//司令部的初始生命元
	int cur_HP;//司令部当前的生命元
	int make_order[5] = { 0 };//司令部制造武士的顺序
	int cur_index = 0;//准备制造武士的索引
	int cur_num = 1;//准备制造武士的编号
	int warriors_count[5] = { 0 };//每种武士的数目
	bool make_or_not = true;//是否继续制造武士
	vector<Warrior*>warriors;//每个司令部制造的武士
	int warriors_HP[5] = { Dragon::ini_HP,Ninja::ini_HP,Iceman::ini_HP,Lion::ini_HP,Wolf::ini_HP };//记录制造每种武士所需要的生命元数目
	static int cur_hour;//当前的时间
	int enemy_num = 0;

	Head(string _color) :color(_color) {
		//分类讨论两个司令部制造武士的顺序dragon/ninja/iceman/lion/wolf
		/*红方司令部按照iceman、lion、wolf、ninja、dragon 的顺序制造武士。
		蓝方司令部按照lion、dragon、ninja、iceman、wolf 的顺序制造武士。*/
		if (color == "red") {
			make_order[0] = 3;
			make_order[1] = 4;
			make_order[2] = 5;
			make_order[3] = 2;
			make_order[4] = 1;
		}
		else {
			make_order[0] = 4;
			make_order[1] = 1;
			make_order[2] = 2;
			make_order[3] = 3;
			make_order[4] = 5;
		}
		cur_HP = ini_HP;
	}

	//制造武士的函数
	Warrior* Make_warriors() {
		cur_index %= 5;//循环制造武士
		//当该司令部不能制造本该要制造的武士时，该司令部将暂停制造该武士并等待至可以制造
		if (cur_HP < warriors_HP[make_order[cur_index] - 1]) {
			return NULL;
		}

		cur_HP -= warriors_HP[make_order[cur_index] - 1];
		//分别判断该制造哪种武士
		switch (make_order[cur_index]) {
		case 1: {
			warriors.push_back(new Dragon(cur_num, color, cur_HP));
			//cout << color << "dragon";
			break;
		}
		case 2: {
			warriors.push_back(new Ninja(cur_num, color));
			//cout << "ninja";
			break;
		}
		case 3: {
			warriors.push_back(new Iceman(cur_num, color));
			//cout << "iceman";
			break;
		}
		case 4: {
			warriors.push_back(new Lion(cur_num, cur_HP, color));
			//cout << color << "lion";
			break;
		}
		case 5: {
			warriors.push_back(new Wolf(cur_num, color));
			//cout << "wolf";
			break;
		}

		}

		//输出武士降生
		warriors[warriors.size() - 1]->Birth(cur_hour);
		cur_index++;
		cur_num++;

		return warriors[warriors.size() - 1];
	};

	//报告生命元函数
	void Report_HP(const int& hour) {
		PrintTime(hour, 50);
		//001:50 20 elements in red headquarter
		cout << cur_HP << " elements in " << color << " headquarter" << endl;
	}

	//lion逃跑函数
	void Run_away() {
		for (int i = 0; i < warriors.size(); ++i)
			if (warriors[i]->GetName() == "lion" && warriors[i]->GetLoyalty() <= 0) {
				//000:05 blue lion 1 ran away
				PrintTime(Head::cur_hour, 5);
				cout << color << " lion " << warriors[i]->Warrior_num << " ran away" << endl;
				warriors.erase(warriors.begin() + i);
				--i;
			}
	}

	//司令部被占据输出函数
	bool Occupy_H() {
		++enemy_num;
		if (enemy_num < 2)
			return false;
		PrintTime(Head::cur_hour, 10);
		//003:10 blue headquarter was taken
		cout << color << " headquarter was taken" << endl;
		return true;
	}
};


//城市类
class City {
public:
	int flag_red_num = 0;
	int flag_blue_num = 0;
	int flag;//该城市的旗帜0——nothing,1——red,2——blue
	Warrior* red_warrior = NULL;//指向红司令部武士的指针
	Warrior* blue_warrior = NULL;//指向蓝司令部武士的指针
	int city_id;//城市的编号
	int battle_result;//战斗后的结果
	int elements;//该城市拥有的生命元数目
	int kill;//发生在该城市的战争哪一方胜利
	int flagbool;//旗帜是否进行了更换
	City(int id, Warrior* r, Warrior* b) :red_warrior(r), blue_warrior(b), city_id(id), elements(0), flag(0), kill(0), flagbool(0) {}

	//判断一个城市是否发生战争的函数
	bool Battle_ornot() { return (red_warrior != NULL) && (blue_warrior != NULL); }

	//城市产出生命元
	void GenerationElement() { elements += 10; }

	//前进输出函数
	void PrintGo(int city, string color) {
		if (color == "red" && red_warrior != NULL)
			red_warrior->PirntGO(city, Head::cur_hour);
		if (color == "blue" && blue_warrior != NULL)
			blue_warrior->PirntGO(city, Head::cur_hour);
	}

	//战斗函数
	void Battle(Head* RED, Head* BLUE) {
		//一场战斗分为多个部分
		//Lion战死后要将战前生命值转移给对方
		int translifered = 0;
		int translifeblue = 0;
		if (red_warrior->GetName() == "lion")
			translifered = red_warrior->GetcurHP();
		if (blue_warrior->GetName() == "lion")
			translifeblue = blue_warrior->GetcurHP();

		bool active = flag == 1 || (flag == 0 && city_id % 2 == 1);

		//战前判断是否已经有一方被arrow射死
		if (red_warrior->Is_Death() && blue_warrior->Is_Death())
			return;
		if (red_warrior->Is_Death())
		{
			Victory("blue", RED, BLUE, 0, !active);
			return;
		}
		if (blue_warrior->Is_Death())
		{
			Victory("red", RED, BLUE, 0, active);
			return;
		}

		//第一部分——判断哪方发起主动进攻，并由该方发起主动进攻，再判断是否发生反击，最后判断哪一方胜出
		if (active) {//红方

			red_warrior->Attack(blue_warrior, Head::cur_hour, city_id);
			//判断对方是否发生反击
			if (!blue_warrior->Is_Death()) {
				if (blue_warrior->GetName() != "ninja")
					blue_warrior->CounterAttack(red_warrior, Head::cur_hour, city_id);
				if (red_warrior->Is_Death())
				{
					red_warrior->PrintDie(Head::cur_hour, city_id);
					Victory("blue", RED, BLUE, translifered);
				}
				else
					Victory("None", RED, BLUE, 0, true);
			}
			else
			{
				blue_warrior->PrintDie(Head::cur_hour, city_id);
				Victory("red", RED, BLUE, translifeblue, true);
			}

		}
		else {//蓝方
			blue_warrior->Attack(red_warrior, Head::cur_hour, city_id);
			//判断对方是否发生反击
			if (!red_warrior->Is_Death()) {
				if (red_warrior->GetName() != "ninja")
					red_warrior->CounterAttack(blue_warrior, Head::cur_hour, city_id);
				if (blue_warrior->Is_Death())
				{
					blue_warrior->PrintDie(Head::cur_hour, city_id);
					Victory("red", RED, BLUE, translifeblue);
				}
				else
					Victory("None", RED, BLUE, 0, false);
			}
			else
			{
				red_warrior->PrintDie(Head::cur_hour, city_id);
				Victory("blue", RED, BLUE, translifered, true);
			}

		}

	}

	//lion逃跑函数
	void Runaway() {
		if (red_warrior != NULL && red_warrior->GetName() == "lion" && red_warrior->GetLoyalty() <= 0)
			red_warrior = NULL;
		if (blue_warrior != NULL && blue_warrior->GetName() == "lion" && blue_warrior->GetLoyalty() <= 0)
			blue_warrior = NULL;
	}

	//Dragon欢呼的函数
	void Cheer(Warrior* w) {
		if (w->GetName() == "dragon")
			w->cheer(Head::cur_hour, city_id);
	}

	//武士放箭函数
	void Archery(Warrior* own, Warrior* other) {
		//进攻方有arrow
		auto& it = own->weapon[0];
		if (it != NULL) {
			it->used_num--;
			if (it->used_num <= 0)
				it = NULL;
			other->GetcurHP() -= Arrow::R;
			//000:35 blue dragon 1 shot
			PrintTime(Head::cur_hour, 35);
			cout << own->GetColor() << " " << own->GetName() << " " << own->GetNum() << " shot";
			if (other->GetcurHP() <= 0) {
				//000:35 blue dragon 1 shot and killed red lion 4
				cout << " and killed ";
				cout << other->GetColor() << " " << other->GetName() << " " << other->GetNum();
			}
			cout << endl;

		}
	}

	//武士使用bomb与敌人同归于尽
	bool PerishTogether() {
		//最后实现该函数
		bool ret_red = false;
		bool ret_blue = false;

		//其中有一方已经死了，直接return
		if (red_warrior->Is_Death() || blue_warrior->Is_Death())
			return false;

		//主动攻击判断
		if (flag == 1 || flag == 0 && city_id % 2 == 1) {//红方主动
			int hurt = red_warrior->Hurt(false);
			if (blue_warrior->GetcurHP() <= hurt)
				ret_blue = true;
			else {
				if (blue_warrior->GetName() != "ninja" && red_warrior->GetcurHP() <= blue_warrior->Hurt(true))
					ret_red = true;
			}
		}
		else {
			if (red_warrior->GetcurHP() <= blue_warrior->Hurt(false))
				ret_red = true;
			else
				if (red_warrior->GetName() != "ninja" && blue_warrior->GetcurHP() <= red_warrior->Hurt(true))
					ret_blue = true;
		}

		//判断武士有没有bomb
		if (red_warrior->weapon[1] == NULL)
			ret_red = false;
		if (blue_warrior->weapon[1] == NULL)
			ret_blue = false;
		if (ret_red) {
			//000:38 blue dragon 1 used a bomb and killed red lion 7
			PrintTime(Head::cur_hour, 38);
			cout << "red " << red_warrior->GetName() << " " << red_warrior->GetNum() << " used a bomb and killed blue " << blue_warrior->GetName() << " " << blue_warrior->GetNum() << endl;
			red_warrior->GetcurHP() = 0;
			blue_warrior->GetcurHP() = 0;
			return true;
		}
		if (ret_blue) {
			PrintTime(Head::cur_hour, 38);
			cout << "blue " << blue_warrior->GetName() << " " << blue_warrior->GetNum() << " used a bomb and killed red " << red_warrior->GetName() << " " << red_warrior->GetNum() << endl;
			red_warrior->GetcurHP() = 0;
			blue_warrior->GetcurHP() = 0;
			return true;
		}
		return false;
	}

	//战后的函数
	void Victory(string color, Head* RED, Head* BLUE, int translife = 0, bool active = false) {
		//红方胜利
		if (color == "red") {
			kill = 1;
			//判断更换旗帜颜色
			flag_blue_num = 0;
			flag_red_num++;
			if (flag != 1) {
				if (flag_red_num == 2)
				{
					flag = 1;
					flagbool = true;
				}
				else
					flagbool = false;
			}

			red_warrior->AfterBattle(true, blue_warrior);
			blue_warrior->AfterBattle(false, red_warrior);

			red_warrior->GetcurHP() += translife;

			if (active && red_warrior->GetName() == "dragon")
				Cheer(red_warrior);

			Earn(red_warrior, RED, 40);

			if (flagbool)
				Flag("red");
			flagbool = false;
		}
		//蓝方胜利
		else if (color == "blue") {
			kill = 2;
			flag_blue_num++;
			flag_red_num = 0;
			if (flag != 2) {
				if (flag_blue_num == 2)
				{
					flag = 2;
					flagbool = true;
				}
				else
					flagbool = false;
			}

			blue_warrior->AfterBattle(true, red_warrior);
			red_warrior->AfterBattle(false, blue_warrior);

			if (active && blue_warrior->GetName() == "dragon")
				Cheer(blue_warrior);

			blue_warrior->GetcurHP() += translife;

			Earn(blue_warrior, BLUE, 40);

			if (flagbool)
				Flag("blue");
			flagbool = false;
		}
		//平局
		else {
			kill = 0;
			flag_red_num = 0;
			flag_blue_num = 0;
			red_warrior->AfterBattle(false, blue_warrior);
			blue_warrior->AfterBattle(false, red_warrior);
			if (active && !red_warrior->Is_Death() && red_warrior->GetName() == "dragon")
				Cheer(red_warrior);
			if (!active && !blue_warrior->Is_Death() && blue_warrior->GetName() == "dragon")
				Cheer(blue_warrior);
		}
	}

	//司令部获取杀死敌人得到的生命元
	void Earn(Warrior* w, Head* head, int min) {
		//001:40 blue dragon 2 earned 10 elements for his headquarter
		PrintTime(Head::cur_hour, min);
		cout << w->GetColor() << " " << w->GetName() << " " << w->GetNum() << " earned " << elements << " elements for his headquarter" << endl;
		head->cur_HP += elements;
		elements = 0;
	}

	//旗帜升起的输出函数
	void Flag(string color) {
		//004:40 blue flag raised in city 4
		PrintTime(Head::cur_hour, 40);
		cout << color << " flag raised in city " << city_id << endl;
	}
};

//武士接受司令部的奖励
void Award(Warrior* w, Head* head, int element) {
	if (element >= 8) {
		w->cur_HP += 8;
		head->cur_HP -= 8;
		element -= 8;
	}
}


//静态变量的初始化
int Arrow::R = 0;
int Head::ini_HP = 0;
int Dragon::ini_HP = 0;
int Ninja::ini_HP = 0;
int Iceman::ini_HP = 0;
int Lion::ini_HP = 0;
int Wolf::ini_HP = 0;
int Dragon::ini_force = 0;
int Ninja::ini_force = 0;
int Iceman::ini_force = 0;
int Lion::ini_force = 0;
int Wolf::ini_force = 0;
int Head::cur_hour = 0;

int main() {
	int t = 0; cin >> t;
	int tt = 1;//第tt组测试
	while (t--)
	{
		//两个司令部之间的城市数量，终止输出时间
		int N, T;
		cin >> Head::ini_HP >> N >> Arrow::R >> K >> T;
		cin >> Dragon::ini_HP >> Ninja::ini_HP >> Iceman::ini_HP >> Lion::ini_HP >> Wolf::ini_HP;
		cin >> Dragon::ini_force >> Ninja::ini_force >> Iceman::ini_force >> Lion::ini_force >> Wolf::ini_force;
		cout << "Case " << tt++ << ":" << endl;
		Head::cur_hour = 0;//对每组测试数据重置当前时间

		Head RED("red");
		Head BLUE("blue");

		//创建N+2个城市的对象（其中第一个为红司令部，最后一个为蓝司令部）
		vector<City*>city;
		for (int i = 0; i < N + 2; ++i)
			city.push_back(new City(i, NULL, NULL));
		City* Ocu1=new City(N + 2, NULL, NULL);
		City* Ocu2=new City(N + 3, NULL, NULL);

		while (true) {
			//0分双方司令部制造武士
			if (Head::cur_hour * 60 > T)
				break;

			city[0]->red_warrior = RED.Make_warriors();
			city[N + 1]->blue_warrior = BLUE.Make_warriors();

			//5分lion逃跑
			if (Head::cur_hour * 60 + 5 > T)
				break;
			RED.Run_away();
			BLUE.Run_away();
			if (city[0]->red_warrior != NULL && city[0]->red_warrior->GetName() == "lion" && city[0]->red_warrior->GetLoyalty() <= 0)
				city[0]->red_warrior = NULL;
			if (city[N + 1]->blue_warrior != NULL && city[N + 1]->blue_warrior->GetName() == "lion" && city[N + 1]->blue_warrior->GetLoyalty() <= 0)
				city[N + 1]->blue_warrior = NULL;
			for (int i = 1; i < N + 1; ++i)
				city[i]->Runaway();

			//10分武士前进
			if (Head::cur_hour * 60 + 10 > T)
				break;
			bool occupy = false;
			if (city[1]->blue_warrior != NULL) {//红司令部被蓝方武士占领
				city[1]->blue_warrior->Occupy(Head::cur_hour);
				if (RED.Occupy_H())
					occupy = true;
				Ocu1->blue_warrior = city[1]->blue_warrior;
			}
			//红方武士
			for (int i = N + 1; i > 0; --i) {
				city[i]->red_warrior = city[i - 1]->red_warrior;
				//iceman
				if (city[i]->red_warrior != NULL && city[i]->red_warrior->GetName() == "iceman")
					city[i]->red_warrior->Goahead();
			}
			city[0]->red_warrior = NULL;
			//蓝方武士
			for (int i = 0; i < N + 1; ++i) {
				city[i]->blue_warrior = city[i + 1]->blue_warrior;
				//iceman
				if (city[i]->blue_warrior != NULL && city[i]->blue_warrior->GetName() == "iceman")
					city[i]->blue_warrior->Goahead();
			}
			city[N + 1]->blue_warrior = NULL;
			//武士前进的输出
			for (int i = 1; i < N + 1; ++i) {
				city[i]->PrintGo(i, "red");
				city[i]->PrintGo(i, "blue");
			}
			//判断游戏是否结束
			if (city[N + 1]->red_warrior != NULL) {//蓝司令部被红方武士占领
				city[N + 1]->red_warrior->Occupy(Head::cur_hour);
				if (BLUE.Occupy_H())
					occupy = true;
				Ocu2->red_warrior = city[N + 1]->red_warrior;
				city[N + 1]->red_warrior = NULL;
			}
			if (occupy)
				break;


			//20分每个城市产出10个生命元
			//30分只有一个武士的城市中，武士取走该城市中的所有生命元并传给司令部
			if (Head::cur_hour * 60 + 30 > T)
				break;
			for (int i = 1; i < N + 1; ++i) {
				city[i]->GenerationElement();
				if (city[i]->red_warrior != NULL && city[i]->blue_warrior == NULL)
					city[i]->Earn(city[i]->red_warrior, &RED, 30);
				else if (city[i]->blue_warrior != NULL && city[i]->red_warrior == NULL)
					city[i]->Earn(city[i]->blue_warrior, &BLUE, 30);
			}

			//35分武士放箭
			if (Head::cur_hour * 60 + 35 > T)
				break;
			for (int i = 1; i < N + 1; ++i) {
				if (city[i]->red_warrior != NULL && city[i + 1]->blue_warrior != NULL)
					city[i]->Archery(city[i]->red_warrior, city[i + 1]->blue_warrior);
				if (city[i]->blue_warrior != NULL && city[i - 1]->red_warrior != NULL)
					city[i]->Archery(city[i]->blue_warrior, city[i - 1]->red_warrior);
			}

			//38分武士判断是否使用bomb与敌人同归于尽
			if (Head::cur_hour * 60 + 38 > T)
				break;
			for (int i = 1; i < N + 1; ++i) {
				if (city[i]->Battle_ornot())
					if (city[i]->PerishTogether()) {
						city[i]->red_warrior = NULL;
						city[i]->blue_warrior = NULL;
					}
			}

			//40分开始战斗（包括战后立即发生的一切）
			//在战斗开始前存两个司令部当前的生命元
			int Relement = RED.cur_HP;
			int Belement = BLUE.cur_HP;
			if (Head::cur_hour * 60 + 40 > T)
				break;
			for (int i = 1; i < N + 1; ++i)
			{
				city[i]->kill = 0;
				if (city[i]->Battle_ornot())
					city[i]->Battle(&RED, &BLUE);
			}
			//司令部奖励杀死敌人的武士生命值（分为红方和蓝方——按照相反的方向奖励武士）
			for (int i = 1; i < N + 1; ++i) {//蓝方
				if (city[i]->kill == 2)
					Award(city[i]->blue_warrior, &BLUE, Belement);
			}
			for (int i = N; i > 0; --i) {//红方
				if (city[i]->kill == 1)
					Award(city[i]->red_warrior, &RED, Relement);
			}
			//循环删除已经死亡的武士
			for (int i = 0; i < RED.warriors.size(); ++i)
				if (RED.warriors[i]->Is_Death())
				{
					RED.warriors.erase(RED.warriors.begin() + i);
					--i;
				}
			for (int i = 0; i < BLUE.warriors.size(); ++i)
				if (BLUE.warriors[i]->Is_Death())
				{
					BLUE.warriors.erase(BLUE.warriors.begin() + i);
					--i;
				}
			for (int i = 1; i < N + 1; ++i) {
				if (city[i]->red_warrior != NULL && city[i]->red_warrior->Is_Death())
					city[i]->red_warrior = NULL;
				if (city[i]->blue_warrior != NULL && city[i]->blue_warrior->Is_Death())
					city[i]->blue_warrior = NULL;
			}

			//50分司令部报告剩余生命元数目
			if (Head::cur_hour * 60 + 50 > T)
				break;
			RED.Report_HP(Head::cur_hour);
			BLUE.Report_HP(Head::cur_hour);

			//55分每名武士报告持有武器情况
			if (Head::cur_hour * 60 + 55 > T)
				break;
			for (int i = 1; i < N + 1; ++i) {
				if (city[i]->red_warrior != NULL)
					city[i]->red_warrior->Report_Weapon(Head::cur_hour);
			}
			if (Ocu2->red_warrior != NULL)
				Ocu2->red_warrior->Report_Weapon(Head::cur_hour);
			if (Ocu1->blue_warrior != NULL)
				Ocu1->blue_warrior->Report_Weapon(Head::cur_hour);
			for (int i = 1; i < N + 1; ++i) {
				if (city[i]->blue_warrior != NULL)
					city[i]->blue_warrior->Report_Weapon(Head::cur_hour);
			}
			Head::cur_hour++;
		}
	}
}
